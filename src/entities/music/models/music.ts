import { atom, useAtomValue } from "jotai";

import { ARTIEST_ALIAS_DICTIONARY } from "@/entities/music/config/custom-artist-dic";
import { MUSIC_DICTIONARY } from "@/entities/music/config/custom-music-dic";
import { ArtistAlias } from "@/entities/music/models/artist";
import { INativePlaylistItem } from "@/entities/music/models/native-playlist-item";

interface IMusic {
	title: string;
	artist: string;
}

export type MusicDic = Record<string, Partial<IMusic>>;

export const musicDictionaryState = atom<MusicDic>(MUSIC_DICTIONARY);

export const artistAliasDictionaryState = atom<ArtistAlias>(
	ARTIEST_ALIAS_DICTIONARY
);

const AUTO_GENERATED_CHECK_KEY = "Auto-generated by YouTube.";

export interface IUseMusicParams {
	videoId: string;
	videoOwnerChannelTitle: string;
	title: string;
	description: string;
}

export function getUseMusicParam(item: INativePlaylistItem): IUseMusicParams {
	return {
		videoId: item.snippet.resourceId.videoId,
		title: item.snippet.title,
		videoOwnerChannelTitle: item.snippet.videoOwnerChannelTitle || "",
		description: item.snippet.description,
	};
}

type IGetTitleParam = IUseMusicParams;

export function getTitle(item: IGetTitleParam, config: MusicDic): string {
	return config[item.videoId]?.title || item.title;
}

type IGetArtistParam = IUseMusicParams;

interface IGetArtistConfig {
	musicDic: MusicDic;
	artistDic: ArtistAlias;
}

export function getArtist(
	item: IGetArtistParam,
	config: IGetArtistConfig
): string {
	const artist: string = (() => {
		if (!item.description.includes(AUTO_GENERATED_CHECK_KEY)) {
			return item.videoOwnerChannelTitle.trim();
		}

		return item.description.split("\n\n")[1].split("Â·")[1].trim();
	})();

	return (
		config.musicDic[item.videoId]?.artist || config.artistDic[artist] || artist
	);
}

export function useMusic(params: IUseMusicParams): IMusic {
	const artistDic = useAtomValue(artistAliasDictionaryState);
	const musicDic = useAtomValue(musicDictionaryState);

	return {
		title: getTitle(params, musicDic),
		artist: getArtist(params, {
			musicDic,
			artistDic,
		}),
	};
}
